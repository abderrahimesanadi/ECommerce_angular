{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let OrderService = /*#__PURE__*/(() => {\n  class OrderService {\n    constructor(http) {\n      this.http = http;\n      this.productsUrl = 'http://vmi1486884.contaboserver.net/api'; // URL to web api\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    validateOrder(idProduct, token, adresse) {\n      return this.http.post(this.productsUrl + \"/order/save\", {\n        \"idProduct\": idProduct,\n        \"token\": token,\n        \"adresse\": adresse\n      }, this.httpOptions).pipe(tap(order => console.log(`new order=${order}`)), catchError(this.handleError('Order')));\n    }\n    /**\n     * Handle Http operation that failed.\n     * Let the app continue.\n     *\n     * @param operation - name of the operation that failed\n     * @param result - optional value to return as the observable result\n     */\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n        // Let the app keep running by returning an empty result.\n        return of(result);\n      };\n    }\n  }\n  OrderService.ɵfac = function OrderService_Factory(t) {\n    return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  OrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrderService,\n    factory: OrderService.ɵfac,\n    providedIn: 'root'\n  });\n  return OrderService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}