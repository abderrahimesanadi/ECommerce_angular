{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class OrderService {\n  constructor(http) {\n    this.http = http;\n    this.productsUrl = 'http://localhost:8080/api'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  validateOrder(idProduct, token, adresse) {\n    return this.http.post(this.productsUrl + \"/order/save\", {\n      \"idProduct\": idProduct,\n      \"token\": token,\n      \"adresse\": adresse\n    }, this.httpOptions).pipe(tap(order => console.log(`new order=${order}`)), catchError(this.handleError('Order')));\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n}\nOrderService.ɵfac = function OrderService_Factory(t) {\n  return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient));\n};\nOrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OrderService,\n  factory: OrderService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,EAAE,QAAQ,MAAM;AAErC,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;;AAKrD,OAAM,MAAOC,YAAY;EASvBC,YACUC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IARN,gBAAW,GAAG,2BAA2B,CAAC,CAAE;IAEpD,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIP,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAKG;EAEJQ,aAAa,CAACC,SAAwB,EAAEC,KAAa,EAAEC,OAAe;IACpE,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,IAAI,CAACC,WAAW,GAAG,aAAa,EAAE;MAAE,WAAW,EAAEJ,SAAS;MAAE,OAAO,EAAEC,KAAK;MAAE,SAAS,EAAEC;IAAO,CAAE,EAAE,IAAI,CAACG,WAAW,CAAC,CAACC,IAAI,CACjJZ,GAAG,CAAEa,KAAU,IAAKC,OAAO,CAACC,GAAG,CAAC,aAAaF,KAAK,EAAE,CAAC,CAAC,EACtDd,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAM,OAAO,CAAC,CAAC,CAC3C;EACH;EAEA;;;;;;;EAOQA,WAAW,CAAIC,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAL,OAAO,CAACK,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MAEA;MACA,OAAOrB,EAAE,CAACoB,MAAW,CAAC;IACxB,CAAC;EACH;;AAtCWjB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAmB,SAAZnB,YAAY;EAAAoB,YAFX;AAAM","names":["HttpHeaders","of","catchError","tap","OrderService","constructor","http","headers","validateOrder","idProduct","token","adresse","post","productsUrl","httpOptions","pipe","order","console","log","handleError","operation","result","error","factory","providedIn"],"sourceRoot":"","sources":["/home/sanadi/app/Boutique-with-angular15/src/app/order.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\n\nimport { catchError, map, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderService {\n\n  private productsUrl = 'http://localhost:8080/api';  // URL to web api\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  validateOrder(idProduct: string | null, token: string, adresse: string) {\n    return this.http.post<any>(this.productsUrl + \"/order/save\", { \"idProduct\": idProduct, \"token\": token, \"adresse\": adresse }, this.httpOptions).pipe(\n      tap((order: any) => console.log(`new order=${order}`)),\n      catchError(this.handleError<any>('Order'))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}