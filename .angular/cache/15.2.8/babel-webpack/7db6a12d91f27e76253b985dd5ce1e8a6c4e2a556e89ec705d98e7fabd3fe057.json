{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    constructor(http) {\n      this.http = http;\n      this.productsUrl = 'http://localhost:8080/api'; // URL to web api\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    /** GET products from the server */\n    getProducts() {\n      return this.http.get(this.productsUrl + \"/products\").pipe(tap(_ => console.log('fetched Productes')), catchError(this.handleError('getProductes', [])));\n    }\n    /** GET cat from the server */\n    getCategories() {\n      return this.http.get(this.productsUrl + \"/categories\").pipe(tap(_ => console.log('fetched categories')), catchError(this.handleError('getcategories', [])));\n    }\n    /** GET Product by id. Will 404 if id not found */\n    getProduct(slug) {\n      const url = `${this.productsUrl}/details/${slug}`;\n      return this.http.get(url).pipe(tap(_ => console.log(`fetched Product id=${slug}`)), catchError(this.handleError(`getProduct id=${slug}`)));\n    }\n    panier() {\n      return this.http.get(this.productsUrl + \"/panier\").pipe(tap(_ => console.log('fetched panier')), catchError(this.handleError('panier', [])));\n    }\n    addToPanier(id) {\n      return this.http.get(this.productsUrl + \"/panier/add/\" + id).pipe(tap(_ => console.log('add to panier' + id)), catchError(this.handleError('add to panier', [])));\n    }\n    removeFromPanier(id) {\n      return this.http.get(this.productsUrl + \"/panier/remove/\" + id).pipe(tap(_ => console.log('removeFromPanier' + id)), catchError(this.handleError('removeFromPanier', [])));\n    }\n    /**\n     * Handle Http operation that failed.\n     * Let the app continue.\n     *\n     * @param operation - name of the operation that failed\n     * @param result - optional value to return as the observable result\n     */\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n        // Let the app keep running by returning an empty result.\n        return of(result);\n      };\n    }\n  }\n  ProductService.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}