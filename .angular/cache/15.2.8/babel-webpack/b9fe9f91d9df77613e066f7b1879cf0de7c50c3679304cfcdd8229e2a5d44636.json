{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(http) {\n    this.http = http;\n    this.productsUrl = 'http://localhost:8080/api'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  loginTo(user) {\n    return this.http.post(this.productsUrl + \"/login\", user, this.httpOptions).pipe(tap(usr => console.log(`loginTo=${usr.token}`)), catchError(this.handleError('User')));\n  }\n  getTheme() {\n    return this.http.get(this.productsUrl + \"/theme/sanadi\").pipe(tap(_ => console.log('getTheme')), catchError(this.handleError('getTheme', [])));\n  }\n  /** GET products from the server */\n  getProducts() {\n    return this.http.get(this.productsUrl + \"/products\").pipe(tap(_ => console.log('fetched Productes')), catchError(this.handleError('getProductes', [])));\n  }\n  /** GET cat from the server */\n  getCategories() {\n    return this.http.get(this.productsUrl + \"/categories\").pipe(tap(_ => console.log('fetched categories')), catchError(this.handleError('getcategories', [])));\n  }\n  /** GET Product by id. Will 404 if id not found */\n  getProduct(slug) {\n    const url = `${this.productsUrl}/details/${slug}`;\n    return this.http.get(url).pipe(tap(_ => console.log(`fetched Product id=${slug}`)), catchError(this.handleError(`getProduct id=${slug}`)));\n  }\n  panier() {\n    return this.http.get(this.productsUrl + \"/panier\").pipe(tap(_ => console.log('fetched panier')), catchError(this.handleError('panier', [])));\n  }\n  addToPanier(id) {\n    return this.http.get(this.productsUrl + \"/panier/add/\" + id).pipe(tap(_ => console.log('add to panier' + id)), catchError(this.handleError('add to panier', [])));\n  }\n  removeFromPanier(id) {\n    return this.http.get(this.productsUrl + \"/panier/remove/\" + id).pipe(tap(_ => console.log('removeFromPanier' + id)), catchError(this.handleError('removeFromPanier', [])));\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","of","catchError","tap","ProductService","constructor","http","headers","loginTo","user","post","productsUrl","httpOptions","pipe","usr","console","log","token","handleError","getTheme","get","_","getProducts","getCategories","getProduct","slug","url","panier","addToPanier","id","removeFromPanier","operation","result","error","factory","providedIn"],"sourceRoot":"","sources":["/home/sanadi/app/Boutique-with-angular15/src/app/product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { Product } from './product';\nimport { Category } from './category';\nimport { Panier } from './panier';\nimport { User } from './user';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  private productsUrl = 'http://localhost:8080/api';  // URL to web api\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n\n  loginTo(user: User): Observable<User> {\n    return this.http.post<User>(this.productsUrl + \"/login\", user, this.httpOptions).pipe(\n      tap((usr: User) => console.log(`loginTo=${usr.token}`)),\n      catchError(this.handleError<User>('User'))\n    );\n  }\n\n  getTheme(): Observable<any> {\n    return this.http.get<any>(this.productsUrl + \"/theme/sanadi\")\n      .pipe(\n        tap(_ => console.log('getTheme')),\n        catchError(this.handleError('getTheme', []))\n      );\n  }\n\n  /** GET products from the server */\n  getProducts(): Observable<Product[]> {\n    return this.http.get<Product[]>(this.productsUrl + \"/products\")\n      .pipe(\n        tap(_ => console.log('fetched Productes')),\n        catchError(this.handleError<Product[]>('getProductes', []))\n      );\n  }\n\n  /** GET cat from the server */\n  getCategories(): Observable<Category[]> {\n    return this.http.get<Category[]>(this.productsUrl + \"/categories\")\n      .pipe(\n        tap(_ => console.log('fetched categories')),\n        catchError(this.handleError<Category[]>('getcategories', []))\n      );\n  }\n\n  /** GET Product by id. Will 404 if id not found */\n  getProduct(slug: any): Observable<Product> {\n    const url = `${this.productsUrl}/details/${slug}`;\n    return this.http.get<Product>(url).pipe(\n      tap(_ => console.log(`fetched Product id=${slug}`)),\n      catchError(this.handleError<Product>(`getProduct id=${slug}`))\n    );\n  }\n\n  panier(): Observable<any> {\n    return this.http.get(this.productsUrl + \"/panier\")\n      .pipe(\n        tap(_ => console.log('fetched panier')),\n        catchError(this.handleError<Product[]>('panier', []))\n      );\n  }\n\n  addToPanier(id: string | null): Observable<any> {\n    return this.http.get(this.productsUrl + \"/panier/add/\" + id)\n      .pipe(\n        tap(_ => console.log('add to panier' + id)),\n        catchError(this.handleError<Product[]>('add to panier', []))\n      );\n  }\n\n  removeFromPanier(id: number): Observable<any> {\n    return this.http.get(this.productsUrl + \"/panier/remove/\" + id)\n      .pipe(\n        tap(_ => console.log('removeFromPanier' + id)),\n        catchError(this.handleError<Product[]>('removeFromPanier', []))\n      );\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}